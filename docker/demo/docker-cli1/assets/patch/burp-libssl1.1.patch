diff --git src/handy.c.orig src/handy.c
index 4d48597c..63cb6ebf 100644
--- src/handy.c.orig
+++ src/handy.c
@@ -279,18 +279,22 @@ EVP_CIPHER_CTX *enc_setup(int encrypt, const char *encryption_password)
 	// compilation warnings on Macs.
 	unsigned char enc_iv[]={'[', 'l', 'k', 'd', '.', '$', 'G', 0xa3, '\0'};

-	if(!(ctx=(EVP_CIPHER_CTX *)malloc(sizeof(EVP_CIPHER_CTX))))
+	if(!(ctx=(EVP_CIPHER_CTX *)EVP_CIPHER_CTX_new()))
 	{
 		log_out_of_memory(__FUNCTION__);
 		return NULL;
 	}
-        memset(ctx, 0, sizeof(EVP_CIPHER_CTX));
 	// Don't set key or IV because we will modify the parameters.
 	EVP_CIPHER_CTX_init(ctx);
 	if(!(EVP_CipherInit_ex(ctx, EVP_bf_cbc(), NULL, NULL, NULL, encrypt)))
 	{
 		logp("EVP_CipherInit_ex failed\n");
-		free(ctx);
+		if(ctx)
+		{
+			EVP_CIPHER_CTX_cleanup(ctx);
+			EVP_CIPHER_CTX_free(ctx);
+			ctx=NULL;
+		}
 		return NULL;
 	}
 	EVP_CIPHER_CTX_set_key_length(ctx, strlen(encryption_password));
@@ -301,7 +305,12 @@ EVP_CIPHER_CTX *enc_setup(int encrypt, const char *encryption_password)
 		enc_iv, encrypt))
 	{
 		logp("Second EVP_CipherInit_ex failed\n");
-		free(ctx);
+		if(ctx)
+		{
+			EVP_CIPHER_CTX_cleanup(ctx);
+			EVP_CIPHER_CTX_free(ctx);
+			ctx=NULL;
+		}
 		return NULL;
 	}
 	return ctx;
@@ -592,7 +601,8 @@ cleanup:
 	if(enc_ctx)
 	{
 		EVP_CIPHER_CTX_cleanup(enc_ctx);
-		free(enc_ctx);
+               EVP_CIPHER_CTX_free(enc_ctx);
+               enc_ctx=NULL;
 	}

 	if(!ret)
